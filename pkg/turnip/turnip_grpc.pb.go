// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: pkg/turnip/turnip.proto

package turnip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TurnipClient is the client API for Turnip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TurnipClient interface {
	JobStarted(ctx context.Context, in *JobStartedRequest, opts ...grpc.CallOption) (*JobStartedReply, error)
	StorePlanOutput(ctx context.Context, in *StorePlanOutputRequest, opts ...grpc.CallOption) (*StorePlanOutputReply, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type turnipClient struct {
	cc grpc.ClientConnInterface
}

func NewTurnipClient(cc grpc.ClientConnInterface) TurnipClient {
	return &turnipClient{cc}
}

func (c *turnipClient) JobStarted(ctx context.Context, in *JobStartedRequest, opts ...grpc.CallOption) (*JobStartedReply, error) {
	out := new(JobStartedReply)
	err := c.cc.Invoke(ctx, "/turnip.Turnip/JobStarted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnipClient) StorePlanOutput(ctx context.Context, in *StorePlanOutputRequest, opts ...grpc.CallOption) (*StorePlanOutputReply, error) {
	out := new(StorePlanOutputReply)
	err := c.cc.Invoke(ctx, "/turnip.Turnip/StorePlanOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnipClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/turnip.Turnip/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TurnipServer is the server API for Turnip service.
// All implementations must embed UnimplementedTurnipServer
// for forward compatibility
type TurnipServer interface {
	JobStarted(context.Context, *JobStartedRequest) (*JobStartedReply, error)
	StorePlanOutput(context.Context, *StorePlanOutputRequest) (*StorePlanOutputReply, error)
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedTurnipServer()
}

// UnimplementedTurnipServer must be embedded to have forward compatible implementations.
type UnimplementedTurnipServer struct {
}

func (UnimplementedTurnipServer) JobStarted(context.Context, *JobStartedRequest) (*JobStartedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStarted not implemented")
}
func (UnimplementedTurnipServer) StorePlanOutput(context.Context, *StorePlanOutputRequest) (*StorePlanOutputReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorePlanOutput not implemented")
}
func (UnimplementedTurnipServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedTurnipServer) mustEmbedUnimplementedTurnipServer() {}

// UnsafeTurnipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TurnipServer will
// result in compilation errors.
type UnsafeTurnipServer interface {
	mustEmbedUnimplementedTurnipServer()
}

func RegisterTurnipServer(s grpc.ServiceRegistrar, srv TurnipServer) {
	s.RegisterService(&Turnip_ServiceDesc, srv)
}

func _Turnip_JobStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnipServer).JobStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turnip.Turnip/JobStarted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnipServer).JobStarted(ctx, req.(*JobStartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turnip_StorePlanOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorePlanOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnipServer).StorePlanOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turnip.Turnip/StorePlanOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnipServer).StorePlanOutput(ctx, req.(*StorePlanOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turnip_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnipServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turnip.Turnip/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnipServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Turnip_ServiceDesc is the grpc.ServiceDesc for Turnip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Turnip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "turnip.Turnip",
	HandlerType: (*TurnipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobStarted",
			Handler:    _Turnip_JobStarted_Handler,
		},
		{
			MethodName: "StorePlanOutput",
			Handler:    _Turnip_StorePlanOutput_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _Turnip_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/turnip/turnip.proto",
}
